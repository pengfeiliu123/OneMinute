package com.lpf.oneminute.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lpf.oneminute.greendao.localBean.LocalMoneyDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOCAL_MONEY_DETAIL".
*/
public class LocalMoneyDetailDao extends AbstractDao<LocalMoneyDetail, Long> {

    public static final String TABLENAME = "LOCAL_MONEY_DETAIL";

    /**
     * Properties of entity LocalMoneyDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property LocalMoneyId = new Property(1, long.class, "localMoneyId", false, "LOCAL_MONEY_ID");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property Cost = new Property(3, int.class, "cost", false, "COST");
    }


    public LocalMoneyDetailDao(DaoConfig config) {
        super(config);
    }
    
    public LocalMoneyDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOCAL_MONEY_DETAIL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"LOCAL_MONEY_ID\" INTEGER NOT NULL ," + // 1: localMoneyId
                "\"CONTENT\" TEXT NOT NULL ," + // 2: content
                "\"COST\" INTEGER NOT NULL );"); // 3: cost
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOCAL_MONEY_DETAIL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LocalMoneyDetail entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getLocalMoneyId());
        stmt.bindString(3, entity.getContent());
        stmt.bindLong(4, entity.getCost());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LocalMoneyDetail entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getLocalMoneyId());
        stmt.bindString(3, entity.getContent());
        stmt.bindLong(4, entity.getCost());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public LocalMoneyDetail readEntity(Cursor cursor, int offset) {
        LocalMoneyDetail entity = new LocalMoneyDetail( //
            cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // localMoneyId
            cursor.getString(offset + 2), // content
            cursor.getInt(offset + 3) // cost
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LocalMoneyDetail entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setLocalMoneyId(cursor.getLong(offset + 1));
        entity.setContent(cursor.getString(offset + 2));
        entity.setCost(cursor.getInt(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LocalMoneyDetail entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LocalMoneyDetail entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LocalMoneyDetail entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
