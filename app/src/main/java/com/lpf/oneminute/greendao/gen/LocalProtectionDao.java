package com.lpf.oneminute.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lpf.oneminute.greendao.localBean.LocalProtection;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOCAL_PROTECTION".
*/
public class LocalProtectionDao extends AbstractDao<LocalProtection, Long> {

    public static final String TABLENAME = "LOCAL_PROTECTION";

    /**
     * Properties of entity LocalProtection.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property Question1 = new Property(2, String.class, "question1", false, "QUESTION1");
        public final static Property Answer1 = new Property(3, String.class, "answer1", false, "ANSWER1");
        public final static Property Question2 = new Property(4, String.class, "question2", false, "QUESTION2");
        public final static Property Answer2 = new Property(5, String.class, "answer2", false, "ANSWER2");
    }


    public LocalProtectionDao(DaoConfig config) {
        super(config);
    }
    
    public LocalProtectionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOCAL_PROTECTION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"USER_ID\" TEXT NOT NULL ," + // 1: userId
                "\"QUESTION1\" TEXT NOT NULL ," + // 2: question1
                "\"ANSWER1\" TEXT NOT NULL ," + // 3: answer1
                "\"QUESTION2\" TEXT NOT NULL ," + // 4: question2
                "\"ANSWER2\" TEXT NOT NULL );"); // 5: answer2
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOCAL_PROTECTION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LocalProtection entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getUserId());
        stmt.bindString(3, entity.getQuestion1());
        stmt.bindString(4, entity.getAnswer1());
        stmt.bindString(5, entity.getQuestion2());
        stmt.bindString(6, entity.getAnswer2());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LocalProtection entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getUserId());
        stmt.bindString(3, entity.getQuestion1());
        stmt.bindString(4, entity.getAnswer1());
        stmt.bindString(5, entity.getQuestion2());
        stmt.bindString(6, entity.getAnswer2());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public LocalProtection readEntity(Cursor cursor, int offset) {
        LocalProtection entity = new LocalProtection( //
            cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // userId
            cursor.getString(offset + 2), // question1
            cursor.getString(offset + 3), // answer1
            cursor.getString(offset + 4), // question2
            cursor.getString(offset + 5) // answer2
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LocalProtection entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setUserId(cursor.getString(offset + 1));
        entity.setQuestion1(cursor.getString(offset + 2));
        entity.setAnswer1(cursor.getString(offset + 3));
        entity.setQuestion2(cursor.getString(offset + 4));
        entity.setAnswer2(cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LocalProtection entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LocalProtection entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LocalProtection entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
