package com.lpf.oneminute.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lpf.oneminute.greendao.localBean.LocalMoney;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOCAL_MONEY".
*/
public class LocalMoneyDao extends AbstractDao<LocalMoney, Long> {

    public static final String TABLENAME = "LOCAL_MONEY";

    /**
     * Properties of entity LocalMoney.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, long.class, "userId", false, "USER_ID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
        public final static Property Time = new Property(4, String.class, "time", false, "TIME");
        public final static Property MoneyUnit = new Property(5, String.class, "moneyUnit", false, "MONEY_UNIT");
        public final static Property TotalCost = new Property(6, String.class, "totalCost", false, "TOTAL_COST");
    }


    public LocalMoneyDao(DaoConfig config) {
        super(config);
    }
    
    public LocalMoneyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOCAL_MONEY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"USER_ID\" INTEGER NOT NULL ," + // 1: userId
                "\"TITLE\" TEXT NOT NULL ," + // 2: title
                "\"CONTENT\" TEXT NOT NULL ," + // 3: content
                "\"TIME\" TEXT NOT NULL ," + // 4: time
                "\"MONEY_UNIT\" TEXT NOT NULL ," + // 5: moneyUnit
                "\"TOTAL_COST\" TEXT NOT NULL );"); // 6: totalCost
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOCAL_MONEY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LocalMoney entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getUserId());
        stmt.bindString(3, entity.getTitle());
        stmt.bindString(4, entity.getContent());
        stmt.bindString(5, entity.getTime());
        stmt.bindString(6, entity.getMoneyUnit());
        stmt.bindString(7, entity.getTotalCost());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LocalMoney entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getUserId());
        stmt.bindString(3, entity.getTitle());
        stmt.bindString(4, entity.getContent());
        stmt.bindString(5, entity.getTime());
        stmt.bindString(6, entity.getMoneyUnit());
        stmt.bindString(7, entity.getTotalCost());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public LocalMoney readEntity(Cursor cursor, int offset) {
        LocalMoney entity = new LocalMoney( //
            cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // userId
            cursor.getString(offset + 2), // title
            cursor.getString(offset + 3), // content
            cursor.getString(offset + 4), // time
            cursor.getString(offset + 5), // moneyUnit
            cursor.getString(offset + 6) // totalCost
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LocalMoney entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setUserId(cursor.getLong(offset + 1));
        entity.setTitle(cursor.getString(offset + 2));
        entity.setContent(cursor.getString(offset + 3));
        entity.setTime(cursor.getString(offset + 4));
        entity.setMoneyUnit(cursor.getString(offset + 5));
        entity.setTotalCost(cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LocalMoney entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LocalMoney entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LocalMoney entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
